
import { useState, useEffect } from "react";

// Tipos de dados
export interface Report {
  id: number;
  type: string;
  address: string;
  date: string;
  status: string;
  priority: string;
  position: [number, number];
}

export interface Task {
  id: number;
  title: string;
  completed: boolean;
  time: string;
}

export interface Category {
  id: number;
  name: string;
  icon: string;
}

export interface StatItem {
  label: string;
  value: number;
  trend: "up" | "down";
  percent: number;
}

export interface WeatherInfo {
  temp: number;
  condition: string;
  icon: string;
}

// Hook para lidar com todos os dados do dashboard
export const useDashboardData = () => {
  const [userPosition, setUserPosition] = useState<[number, number] | null>(null);
  const [nearbyIssues, setNearbyIssues] = useState<Report[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [weatherInfo, setWeatherInfo] = useState<WeatherInfo | null>(null);

  // Mock data para estat√≠sticas
  const stats: StatItem[] = [
    { label: "Ocorr√™ncias Total", value: 128, trend: "up", percent: 12 },
    { label: "Resolvidas", value: 87, trend: "up", percent: 8 },
    { label: "Em andamento", value: 41, trend: "down", percent: 5 },
    { label: "√öltimas 24h", value: 12, trend: "up", percent: 50 },
  ];

  // Mock data para tarefas di√°rias
  const dailyTasks: Task[] = [
    { id: 1, title: "Inspecionar obras na Av. Brasil", completed: false, time: "09:00" },
    { id: 2, title: "Verificar reclama√ß√µes de ru√≠do", completed: true, time: "11:30" },
    { id: 3, title: "Reuni√£o com secretaria", completed: false, time: "14:00" },
    { id: 4, title: "Enviar relat√≥rio di√°rio", completed: false, time: "17:00" },
  ];

  // Mock data para categorias de relat√≥rio r√°pido
  const reportCategories: Category[] = [
    { id: 1, name: "Buraco na via", icon: "üöß" },
    { id: 2, name: "Poda de √°rvore", icon: "üå≥" },
    { id: 3, name: "L√¢mpada queimada", icon: "üí°" },
    { id: 4, name: "Lixo/Entulho", icon: "üóëÔ∏è" },
    { id: 5, name: "Esgoto/Vazamento", icon: "üíß" },
    { id: 6, name: "Sinaliza√ß√£o", icon: "üö¶" },
  ];

  // Mock data para relat√≥rios recentes
  const recentReports: Report[] = [
    { 
      id: 1, 
      type: "Buraco na via", 
      address: "Rua das Flores, 123", 
      date: "2023-05-08", 
      status: "Pendente",
      priority: "high",
      position: [-23.55152, -46.633408] as [number, number],
    },
    { 
      id: 2, 
      type: "√Årvore ca√≠da", 
      address: "Av. Principal, 456", 
      date: "2023-05-07", 
      status: "Em an√°lise",
      priority: "medium",
      position: [-23.54550, -46.638100] as [number, number],
    },
    { 
      id: 3, 
      type: "L√¢mpada queimada", 
      address: "Pra√ßa Central", 
      date: "2023-05-06", 
      status: "Resolvido",
      priority: "low",
      position: [-23.56052, -46.629708] as [number, number],
    },
    { 
      id: 4, 
      type: "Lixo acumulado", 
      address: "Rua Lateral, 789", 
      date: "2023-05-05", 
      status: "Resolvido",
      priority: "medium",
      position: [-23.55552, -46.641308] as [number, number],
    },
  ];
  
  // Efeito para obter posi√ß√£o do usu√°rio e carregar dados
  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setUserPosition([latitude, longitude]);
          
          // Mock: Encontrar ocorr√™ncias pr√≥ximas (simula√ß√£o)
          const mockNearby = recentReports
            .filter(issue => Math.random() > 0.5) // Simulando dist√¢ncia
            .slice(0, 2);
          setNearbyIssues(mockNearby);
        },
        (error) => {
          console.error("Erro ao obter localiza√ß√£o:", error);
        }
      );
    }
    
    // Mock do clima (numa aplica√ß√£o real, usar√≠amos uma API)
    setWeatherInfo({
      temp: 24,
      condition: "Parcialmente nublado",
      icon: "‚õÖ"
    });
  }, []);

  // Fun√ß√£o para lidar com novo relat√≥rio r√°pido
  const handleQuickReport = (categoryName: string) => {
    setIsLoading(true);
    
    // Simular carregamento para melhor experi√™ncia do usu√°rio
    return new Promise<void>((resolve) => {
      setTimeout(() => {
        setIsLoading(false);
        resolve();
      }, 300);
    });
  };

  // Fun√ß√£o para ver detalhes da ocorr√™ncia com feedback
  const handleViewReport = (reportId: number) => {
    setIsLoading(true);
    
    // Simular carregamento para melhor experi√™ncia do usu√°rio
    return new Promise<void>((resolve) => {
      setTimeout(() => {
        setIsLoading(false);
        resolve();
      }, 200);
    });
  };

  // Preparar marcadores para o mapa com IDs que podem ser string ou number
  const mapMarkers = recentReports.map(report => ({
    id: report.id,
    position: report.position,
    title: report.address,
    type: report.type,
    status: report.status === "Pendente" ? "pending" : 
           report.status === "Em an√°lise" ? "in_progress" : "resolved" as any,
    priority: report.priority as any
  }));

  return {
    stats,
    dailyTasks,
    reportCategories,
    recentReports,
    nearbyIssues,
    userPosition,
    weatherInfo,
    isLoading,
    mapMarkers,
    handleQuickReport,
    handleViewReport,
    setIsLoading,
  };
};
